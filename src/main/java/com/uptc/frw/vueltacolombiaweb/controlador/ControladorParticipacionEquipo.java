package com.uptc.frw.vueltacolombiaweb.controlador;

import com.uptc.frw.vueltacolombiaweb.modelo.Etapa;
import com.uptc.frw.vueltacolombiaweb.modelo.ParticipacionEquipo;
import com.uptc.frw.vueltacolombiaweb.servicio.ServicioEtapa;
import com.uptc.frw.vueltacolombiaweb.servicio.ServicioParticipacionEquipo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("participacionEquipos")
public class ControladorParticipacionEquipo {

    private static final Logger logger = LoggerFactory.getLogger(ServicioParticipacionEquipo.class);

    @Autowired
    private ServicioParticipacionEquipo servicioParticipacionEquipo;

    @GetMapping
    public List<ParticipacionEquipo> obtenerParticipacionEquipos() {
        logger.info("\nüì• [GET] ====== CONSULTAR TODAS LAS PARTICIPACIONES DE EQUIPOS ======");
        List<ParticipacionEquipo> lista = servicioParticipacionEquipo.buscarParticipacionEquipo();
        logger.info("‚úÖ Total de participaciones encontradas: {}", lista.size());
        logger.info("üìÑ Datos: {}", lista);
        logger.info("=================================================================\n");
        return lista;
    }

    @GetMapping("/{id}")
    public ParticipacionEquipo obtenerParticipacionEquipo(@PathVariable Long id) {
        logger.info("\nüîç [GET] ====== CONSULTAR PARTICIPACI√ìN DE EQUIPO POR ID ======");
        logger.info("üÜî ID recibido: {}", id);
        ParticipacionEquipo participacion = servicioParticipacionEquipo.obtenerParticipacionEquipoPorId(id);
        logger.info("üìÑ Participaci√≥n encontrada: {}", participacion);
        logger.info("=============================================================\n");
        return participacion;
    }

    @PostMapping
    public ParticipacionEquipo guardarParticipacionEquipo(@RequestBody ParticipacionEquipo participacionEquipo) {
        logger.info("\nüìù [POST] ====== GUARDAR NUEVA PARTICIPACI√ìN DE EQUIPO ======");
        logger.info("üì• Datos recibidos: {}", participacionEquipo);
        ParticipacionEquipo guardado = servicioParticipacionEquipo.guardarParticipacionEquipo(participacionEquipo);
        logger.info("‚úÖ Participaci√≥n guardada exitosamente: {}", guardado);
        logger.info("===========================================================\n");
        return guardado;
    }

    @PutMapping
    public ParticipacionEquipo actualizarParticipacionEquipo(@RequestBody ParticipacionEquipo participacionEquipo) {
        logger.info("\n‚úèÔ∏è [PUT] ====== ACTUALIZAR PARTICIPACI√ìN DE EQUIPO ======");
        ParticipacionEquipo actual = servicioParticipacionEquipo.obtenerParticipacionEquipoPorId(participacionEquipo.getId());
        logger.info("üìå Datos actuales: {}", actual);
        logger.info("üì• Nuevos datos: {}", participacionEquipo);
        ParticipacionEquipo actualizado = servicioParticipacionEquipo.actualizarParticipacionEquipo(participacionEquipo);
        logger.info("‚úÖ Actualizaci√≥n completada: {}", actualizado);
        logger.info("=========================================================\n");
        return actualizado;
    }

    @DeleteMapping
    public void borrarParticipacionEquipo(@RequestParam Long id) {
        logger.info("\nüóëÔ∏è [DELETE] ====== ELIMINAR PARTICIPACI√ìN DE EQUIPO ======");
        logger.info("üÜî ID a eliminar: {}", id);
        servicioParticipacionEquipo.borrarParticionacionEquipo(id);
        logger.info("‚úÖ Participaci√≥n eliminada exitosamente");
        logger.info("=====================================================\n");
    }
}
